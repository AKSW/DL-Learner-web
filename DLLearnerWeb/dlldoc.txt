This file contains an automatically generated files of all components and their config options.

*************************
* Non-component classes *
*************************

component: Command Line Interface (org.dllearner.cli.CLI) v0.0
==============================================================

conf file usage: cli.type = "org.dllearner.cli.CLI"

option name: logLevel
description: Configure logger log level from conf file. Available levels: "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE". Note, to see results, at least "INFO" is required.
type: String
required: false
default value: INFO
conf file usage: cli.logLevel = "INFO"

option name: nrOfFolds
description: Number of folds in Cross-Validation mode
type: int
required: false
default value: 10
conf file usage: cli.nrOfFolds = 10

option name: performCrossValidation
description: Run in Cross-Validation mode
type: boolean
required: false
default value: false
conf file usage: cli.performCrossValidation = false

option name: writeSpringConfiguration
description: Write the Spring XML configuration to disk corresponding to the .conf file
type: boolean
required: false
default value: false
conf file usage: cli.writeSpringConfiguration = false

component: GLOBAL OPTIONS (org.dllearner.cli.DocumentationGeneratorMeta.GlobalDoc) v0.0
=======================================================================================


option name: prefixes
description: Mapping of prefixes to replace inside other configuration file entries
type: Map
required: false
default value: 
conf file usage: prefixes = [ ("ex","http://example.com/father#") ]

option name: rendering
description: The string renderer for any OWL expression output, can be "dlsyntax" or "manchester"
type: String
required: false
default value: manchester
conf file usage: rendering = "dlsyntax"


*********************
* Knowledge Sources *
*********************

component: KB File (org.dllearner.kb.KBFile) v0.8
=================================================

conf file usage: ks.type = "kbfile"

option name: baseDir
description: change the base directory (must be absolute)
type: String
required: false
default value: directory of conf file
conf file usage: ks.baseDir = "directory of conf file"

option name: fileName
description: relative or absolute path to KB file
type: String
required: false
default value: 
conf file usage: ks.fileName = ""

option name: url
description: URL pointer to the KB file
type: String
required: false
default value: 
conf file usage: ks.url = ""

component: Local Endpoint (org.dllearner.kb.LocalModelBasedSparqlEndpointKS) v0.9
=================================================================================

conf file usage: ks.type = "local_sparql"

option name: cacheDir
description: The base directory of the SPARQL query cache.
type: String
required: false
default value: tmp folder of the system
conf file usage: ks.cacheDir = "tmp folder of the system"

option name: cacheTTL
description: The time to live in milliseconds for cached SPARQL queries, if enabled. The default value is 86400s(=1 day).
type: long
required: false
default value: 86400
conf file usage: ks.cacheTTL = 86400

option name: defaultGraphURIs
description: a list of default graph URIs
type: List
required: false
default value: {}
conf file usage: ks.defaultGraphURIs = {}

option name: namedGraphURIs
description: a list of named graph URIs
type: List
required: false
default value: {}
conf file usage: ks.namedGraphURIs = {}

option name: queryDelay
description: Use this setting to avoid overloading the endpoint with a sudden burst of queries. A value below 0 means no delay.
type: long
required: false
default value: 50
conf file usage: ks.queryDelay = 50

option name: retryCount
description: The maximum number of retries for the execution of a particular SPARQL query.
type: int
required: false
default value: 3
conf file usage: ks.retryCount = 3

option name: url
description: URL of the SPARQL endpoint
type: URL
required: true
default value: 
conf file usage: ks.url = ""

option name: useCache
description: Use this setting to enable caching of SPARQL queries in a local database.
type: boolean
required: false
default value: true
conf file usage: ks.useCache = true

component: OWL File (org.dllearner.kb.OWLFile) v0.9
===================================================

conf file usage: ks.type = "owlfile"

option name: baseDir
description: separately specify directory of KB file
type: String
required: false
default value: 
conf file usage: ks.baseDir = ""

option name: defaultGraphURIs
description: a list of default graph URIs to query from the Endpoint
type: List
required: false
default value: 
conf file usage: ks.defaultGraphURIs = {}

option name: fileName
description: relative or absolute path to KB file
type: String
required: false
default value: 
conf file usage: ks.fileName = ""

option name: namedGraphURIs
description: a list of named graph URIs to query from the Endpoint
type: List
required: false
default value: 
conf file usage: ks.namedGraphURIs = {}

option name: reasoningString
description: Enable JENA reasoning on the Ontology Model. Available reasoners are: "micro_rule", "mini_rule", "rdfs", "rule"
type: String
required: false
default value: false
conf file usage: ks.reasoningString = "false"

option name: sparql
description: SPARQL CONSTRUCT expression to download from Endpoint
type: String
required: false
default value: 
conf file usage: ks.sparql = ""

option name: url
description: URL pointer to the KB file or Endpoint
type: URL
required: false
default value: 
conf file usage: ks.url = ""

component: SPARQL endpoint (org.dllearner.kb.SparqlEndpointKS) v0.2
===================================================================

conf file usage: ks.type = "sparql"

option name: cacheDir
description: The base directory of the SPARQL query cache.
type: String
required: false
default value: tmp folder of the system
conf file usage: ks.cacheDir = "tmp folder of the system"

option name: cacheTTL
description: The time to live in milliseconds for cached SPARQL queries, if enabled. The default value is 86400s(=1 day).
type: long
required: false
default value: 86400
conf file usage: ks.cacheTTL = 86400

option name: defaultGraphURIs
description: a list of default graph URIs
type: List
required: false
default value: {}
conf file usage: ks.defaultGraphURIs = {}

option name: namedGraphURIs
description: a list of named graph URIs
type: List
required: false
default value: {}
conf file usage: ks.namedGraphURIs = {}

option name: queryDelay
description: Use this setting to avoid overloading the endpoint with a sudden burst of queries. A value below 0 means no delay.
type: long
required: false
default value: 50
conf file usage: ks.queryDelay = 50

option name: retryCount
description: The maximum number of retries for the execution of a particular SPARQL query.
type: int
required: false
default value: 3
conf file usage: ks.retryCount = 3

option name: url
description: URL of the SPARQL endpoint
type: URL
required: true
default value: 
conf file usage: ks.url = ""

option name: useCache
description: Use this setting to enable caching of SPARQL queries in a local database.
type: boolean
required: false
default value: true
conf file usage: ks.useCache = true

component: SPARQL endpoint fragment (org.dllearner.kb.sparql.SparqlKnowledgeSource) v0.5
========================================================================================

conf file usage: ks.type = "sparqlfrag"

component: efficient SPARQL fragment extractor (org.dllearner.kb.sparql.simple.SparqlSimpleExtractor) v0.1
==========================================================================================================

conf file usage: ks.type = "sparqls"

option name: aboxfilter
description: Filter for the tbox, can use variable ?s, ?p amd ?o
type: String
required: false
default value: 
conf file usage: ks.aboxfilter = ""

option name: defaultGraphURI
description: default graph URI
type: String
required: true
default value: 
conf file usage: ks.defaultGraphURI = ""

option name: endpointURL
description: URL of the SPARQL endpoint
type: String
required: true
default value: 
conf file usage: ks.endpointURL = ""

option name: instances
description: List of the instances to use
type: List
required: true
default value: 
conf file usage: ks.instances = {}

option name: ontologySchemaUrls
description: List of Ontology Schema URLs
type: List
required: true
default value: 
conf file usage: ks.ontologySchemaUrls = {}

option name: recursionDepth
description: recursion depth
type: int
required: true
default value: 
conf file usage: ks.recursionDepth = 

option name: sparqlQuery
description: Sparql Query
type: String
required: false
default value: 
conf file usage: ks.sparqlQuery = ""

option name: tboxfilter
description: Filter for the tbox, can use variable ?example and ?class
type: String
required: false
default value: 
conf file usage: ks.tboxfilter = ""



*********************
* LearningAlgorithm *
*********************



**************************
* AxiomLearningAlgorithm *
**************************

component: asymmetric object property axiom learner (org.dllearner.algorithms.properties.AsymmetricObjectPropertyAxiomLearner) v0.1
===================================================================================================================================
A learning algorithm for asymmetric object property axioms.

conf file usage: la.type = "oplasymm"

component: data property domain axiom learner (org.dllearner.algorithms.properties.DataPropertyDomainAxiomLearner) v0.1
=======================================================================================================================
A learning algorithm for data property domain axioms.

conf file usage: la.type = "dpldomain"

component: data property range learner (org.dllearner.algorithms.properties.DataPropertyRangeAxiomLearner) v0.1
===============================================================================================================
A learning algorithm for reflexive data property range axioms.

conf file usage: la.type = "dblrange"

component: disjoint data properties axiom learner (org.dllearner.algorithms.properties.DisjointDataPropertyAxiomLearner) v0.1
=============================================================================================================================
A learning algorithm for disjoint data properties axioms.

conf file usage: la.type = "dpldisjoint"

component: disjoint object properties axiom learner (org.dllearner.algorithms.properties.DisjointObjectPropertyAxiomLearner) v0.1
=================================================================================================================================
A learning algorithm for disjoint object properties axioms.

conf file usage: la.type = "opldisjoint"

component: equivalent data properties axiom learner (org.dllearner.algorithms.properties.EquivalentDataPropertyAxiomLearner) v0.1
=================================================================================================================================
A learning algorithm for equivalent data properties axioms.

conf file usage: la.type = "dplequiv"

component: equivalent object properties axiom learner (org.dllearner.algorithms.properties.EquivalentObjectPropertyAxiomLearner) v0.1
=====================================================================================================================================
A learning algorithm for equivalent object properties axioms.

conf file usage: la.type = "oplequiv"

component: functional data property axiom learner (org.dllearner.algorithms.properties.FunctionalDataPropertyAxiomLearner) v0.1
===============================================================================================================================
A learning algorithm for functional data property axioms.

conf file usage: la.type = "dplfunc"

component: functional object property axiom learner (org.dllearner.algorithms.properties.FunctionalObjectPropertyAxiomLearner) v0.1
===================================================================================================================================
A learning algorithm for functional object property axioms.

conf file usage: la.type = "oplfunc"

component: inverse functional object property axiom learner (org.dllearner.algorithms.properties.InverseFunctionalObjectPropertyAxiomLearner) v0.1
==================================================================================================================================================
A learning algorithm for inverse functional object property axioms.

conf file usage: la.type = "oplinvfunc"

component: inverse object property axiom learner (org.dllearner.algorithms.properties.InverseObjectPropertyAxiomLearner) v0.1
=============================================================================================================================
A learning algorithm for inverse object property axioms.

conf file usage: la.type = "oplinv"

component: irreflexive object property axiom learner (org.dllearner.algorithms.properties.IrreflexiveObjectPropertyAxiomLearner) v0.1
=====================================================================================================================================
A learning algorithm for irreflexive object property axioms.

conf file usage: la.type = "oplirrefl"

component: object property domain axiom learner (org.dllearner.algorithms.properties.ObjectPropertyDomainAxiomLearner) v0.1
===========================================================================================================================
A learning algorithm for object property domain axioms.

conf file usage: la.type = "opldomain"

component: object property range learner (org.dllearner.algorithms.properties.ObjectPropertyRangeAxiomLearner) v0.1
===================================================================================================================
A learning algorithm for object property range axioms.

conf file usage: la.type = "oplrange"

component: reflexive object property axiom learner (org.dllearner.algorithms.properties.ReflexiveObjectPropertyAxiomLearner) v0.1
=================================================================================================================================
A learning algorithm for reflexive object property domain axioms.

conf file usage: la.type = "oplrefl"

component: data subproperty axiom learner (org.dllearner.algorithms.properties.SubDataPropertyOfAxiomLearner) v0.1
==================================================================================================================
A learning algorithm data subproperty axioms.

conf file usage: la.type = "dplsubprop"

component: object subproperty axiom learner (org.dllearner.algorithms.properties.SubObjectPropertyOfAxiomLearner) v0.1
======================================================================================================================
A learning algorithm object subproperty axioms.

conf file usage: la.type = "oplsubprop"

component: symmetric object property axiom learner (org.dllearner.algorithms.properties.SymmetricObjectPropertyAxiomLearner) v0.1
=================================================================================================================================
A learning algorithm for symmetric object property axioms.

conf file usage: la.type = "oplsymm"

component: transitive object property axiom learner (org.dllearner.algorithms.properties.TransitiveObjectPropertyAxiomLearner) v0.1
===================================================================================================================================
A learning algorithm for transitive object property axioms.

conf file usage: la.type = "opltrans"



************************************
* ClassExpressionLearningAlgorithm *
************************************

component: disjoint classes learner (org.dllearner.algorithms.DisjointClassesLearner) v0.1
==========================================================================================

conf file usage: la.type = "cldisjoint"

option name: entityToDescribe
description: the OWL entity to learn about
type: OWLEntity
required: false
default value: 
conf file usage: la.entityToDescribe = ""

option name: ks
description: the sparql endpoint knowledge source
type: SparqlEndpointKS
required: false
default value: 
conf file usage: la.ks = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds (abstract)
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxFetchedRows
description: The maximum number of rows fetched from the endpoint to approximate the result.
type: int
required: false
default value: 
conf file usage: la.maxFetchedRows = 

option name: reasoner
description: The sparql reasoner instance to use
type: SPARQLReasoner
required: false
default value: SPARQLReasoner
conf file usage: la.reasoner = "SPARQLReasoner"

option name: returnOnlyNewAxioms
description: omit axioms already existing in the knowledge base
type: boolean
required: false
default value: false
conf file usage: la.returnOnlyNewAxioms = false

option name: suggestMostGeneralClasses
description: only keep most general classes in suggestions
type: boolean
required: false
default value: true
conf file usage: la.suggestMostGeneralClasses = true

option name: useClassPopularity
description: include instance count / popularity when computing scores
type: boolean
required: false
default value: true
conf file usage: la.useClassPopularity = true

component: Naive AL Learner (org.dllearner.algorithms.NaiveALLearner) v0.1
==========================================================================

conf file usage: la.type = "naiveALLearner"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxLength
description: maximum length of class expression
type: int
required: false
default value: 4
conf file usage: la.maxLength = 4

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

component: simple subclass learner (org.dllearner.algorithms.SimpleSubclassLearner) v0.1
========================================================================================

conf file usage: la.type = "clsub"

option name: entityToDescribe
description: the OWL entity to learn about
type: OWLEntity
required: false
default value: 
conf file usage: la.entityToDescribe = ""

option name: ks
description: the sparql endpoint knowledge source
type: SparqlEndpointKS
required: false
default value: 
conf file usage: la.ks = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds (abstract)
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxFetchedRows
description: The maximum number of rows fetched from the endpoint to approximate the result.
type: int
required: false
default value: 
conf file usage: la.maxFetchedRows = 

option name: reasoner
description: The sparql reasoner instance to use
type: SPARQLReasoner
required: false
default value: SPARQLReasoner
conf file usage: la.reasoner = "SPARQLReasoner"

option name: returnOnlyNewAxioms
description: omit axioms already existing in the knowledge base
type: boolean
required: false
default value: false
conf file usage: la.returnOnlyNewAxioms = false

component: CELOE (org.dllearner.algorithms.celoe.CELOE) v1.0
============================================================
CELOE is an adapted and extended version of the OCEL algorithm applied for the ontology engineering use case. See http://jens-lehmann.org/files/2011/celoe.pdf for reference.

conf file usage: la.type = "celoe"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: expandAccuracy100Nodes
description: whether to try and refine solutions which already have accuracy value of 1
type: boolean
required: false
default value: false
conf file usage: la.expandAccuracy100Nodes = false

option name: filterDescriptionsFollowingFromKB
description: If true, then the results will not contain suggestions, which already follow logically from the knowledge base. Be careful, since this requires a potentially expensive consistency check for candidate solutions.
type: boolean
required: false
default value: false
conf file usage: la.filterDescriptionsFollowingFromKB = false

option name: heuristic
description: no description available
type: AbstractHeuristic
required: false
default value: celoe_heuristic
conf file usage: la.heuristic = "celoe_heuristic"

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxClassExpressionTests
description: The maximum number of candidate hypothesis the algorithm is allowed to test (0 = no limit). The algorithm will stop afterwards. (The real number of tests can be slightly higher, because this criterion usually won't be checked after each single test.)
type: int
required: false
default value: 0
conf file usage: la.maxClassExpressionTests = 0

option name: maxClassExpressionTestsAfterImprovement
description: The maximum number of candidate hypothesis the algorithm is allowed after an improvement in accuracy (0 = no limit). The algorithm will stop afterwards. (The real number of tests can be slightly higher, because this criterion usually won't be checked after each single test.)
type: int
required: false
default value: 0
conf file usage: la.maxClassExpressionTestsAfterImprovement = 0

option name: maxDepth
description: maximum depth of description
type: double
required: false
default value: 7
conf file usage: la.maxDepth = 7

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxExecutionTimeInSecondsAfterImprovement
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 0
conf file usage: la.maxExecutionTimeInSecondsAfterImprovement = 0

option name: maxNrOfResults
description: Sets the maximum number of results one is interested in. (Setting this to a lower value may increase performance as the learning algorithm has to store/evaluate/beautify less descriptions).
type: int
required: false
default value: 10
conf file usage: la.maxNrOfResults = 10

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
type: double
required: false
default value: 0.0
conf file usage: la.noisePercentage = 0.0

option name: operator
description: the refinement operator instance to use
type: LengthLimitedRefinementOperator
required: false
default value: 
conf file usage: la.operator = ""

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: replaceSearchTree
description: specifies whether to replace the search tree in the log file after each run or append the new search tree
type: boolean
required: false
default value: false
conf file usage: la.replaceSearchTree = false

option name: reuseExistingDescription
description: If true, the algorithm tries to find a good starting point close to an existing definition/super class of the given class in the knowledge base.
type: boolean
required: false
default value: false
conf file usage: la.reuseExistingDescription = false

option name: searchTreeFile
description: file to use for the search tree
type: String
required: false
default value: log/searchTree.txt
conf file usage: la.searchTreeFile = "log/searchTree.txt"

option name: singleSuggestionMode
description: Use this if you are interested in only one suggestion and your learning problem has many (more than 1000) examples.
type: boolean
required: false
default value: false
conf file usage: la.singleSuggestionMode = false

option name: startClass
description: You can specify a start class for the algorithm. To do this, you have to use Manchester OWL syntax either with full IRIs or prefixed IRIs.
type: OWLClassExpression
required: false
default value: owl:Thing
conf file usage: la.startClass = "ex:Male or http://example.org/ontology/Female"

option name: stopOnFirstDefinition
description: algorithm will terminate immediately when a correct definition is found
type: boolean
required: false
default value: false
conf file usage: la.stopOnFirstDefinition = false

option name: terminateOnNoiseReached
description: specifies whether to terminate when noise criterion is met
type: boolean
required: false
default value: false
conf file usage: la.terminateOnNoiseReached = false

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

option name: writeSearchTree
description: specifies whether to write a search tree
type: boolean
required: false
default value: false
conf file usage: la.writeSearchTree = false

component: PCELOE (org.dllearner.algorithms.celoe.PCELOE) v1.0
==============================================================
PCELOE is an experimental, parallel implementation of the CELOE algorithm.

conf file usage: la.type = "pceloe"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: expandAccuracy100Nodes
description: whether to try and refine solutions which already have accuracy value of 1
type: boolean
required: false
default value: false
conf file usage: la.expandAccuracy100Nodes = false

option name: filterDescriptionsFollowingFromKB
description: If true, then the results will not contain suggestions, which already follow logically from the knowledge base. Be careful, since this requires a potentially expensive consistency check for candidate solutions.
type: boolean
required: false
default value: false
conf file usage: la.filterDescriptionsFollowingFromKB = false

option name: heuristic
description: no description available
type: AbstractHeuristic
required: false
default value: celoe_heuristic
conf file usage: la.heuristic = "celoe_heuristic"

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxClassExpressionTests
description: The maximum number of candidate hypothesis the algorithm is allowed to test (0 = no limit). The algorithm will stop afterwards. (The real number of tests can be slightly higher, because this criterion usually won't be checked after each single test.)
type: int
required: false
default value: 0
conf file usage: la.maxClassExpressionTests = 0

option name: maxClassExpressionTestsAfterImprovement
description: The maximum number of candidate hypothesis the algorithm is allowed after an improvement in accuracy (0 = no limit). The algorithm will stop afterwards. (The real number of tests can be slightly higher, because this criterion usually won't be checked after each single test.)
type: int
required: false
default value: 0
conf file usage: la.maxClassExpressionTestsAfterImprovement = 0

option name: maxDepth
description: maximum depth of description
type: double
required: false
default value: 7
conf file usage: la.maxDepth = 7

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxExecutionTimeInSecondsAfterImprovement
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 0
conf file usage: la.maxExecutionTimeInSecondsAfterImprovement = 0

option name: maxNrOfResults
description: Sets the maximum number of results one is interested in. (Setting this to a lower value may increase performance as the learning algorithm has to store/evaluate/beautify less descriptions).
type: int
required: false
default value: 10
conf file usage: la.maxNrOfResults = 10

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
type: double
required: false
default value: 0.0
conf file usage: la.noisePercentage = 0.0

option name: nrOfThreads
description: number of threads running in parallel
type: int
required: false
default value: 2
conf file usage: la.nrOfThreads = 2

option name: operator
description: the refinement operator instance to use
type: LengthLimitedRefinementOperator
required: false
default value: 
conf file usage: la.operator = ""

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: replaceSearchTree
description: specifies whether to replace the search tree in the log file after each run or append the new search tree
type: boolean
required: false
default value: false
conf file usage: la.replaceSearchTree = false

option name: reuseExistingDescription
description: If true, the algorithm tries to find a good starting point close to an existing definition/super class of the given class in the knowledge base.
type: boolean
required: false
default value: false
conf file usage: la.reuseExistingDescription = false

option name: searchTreeFile
description: file to use for the search tree
type: String
required: false
default value: log/searchTree.txt
conf file usage: la.searchTreeFile = "log/searchTree.txt"

option name: singleSuggestionMode
description: Use this if you are interested in only one suggestion and your learning problem has many (more than 1000) examples.
type: boolean
required: false
default value: false
conf file usage: la.singleSuggestionMode = false

option name: startClass
description: You can specify a start class for the algorithm. To do this, you have to use Manchester OWL syntax without using prefixes.
type: OWLClassExpression
required: false
default value: owl:Thing
conf file usage: la.startClass = "owl:Thing"

option name: stopOnFirstDefinition
description: algorithm will terminate immediately when a correct definition is found
type: boolean
required: false
default value: false
conf file usage: la.stopOnFirstDefinition = false

option name: terminateOnNoiseReached
description: specifies whether to terminate when noise criterion is met
type: boolean
required: false
default value: false
conf file usage: la.terminateOnNoiseReached = false

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

option name: writeSearchTree
description: specifies whether to write a search tree
type: boolean
required: false
default value: false
conf file usage: la.writeSearchTree = false

component: ETDT (org.dllearner.algorithms.decisiontrees.dsttdt.DSTTDTClassifier) v1.0
=====================================================================================
An Evidence-based Terminological Decision Tree

conf file usage: la.type = "etdt"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: beam
description: value for limiting the number of generated concepts
type: int
required: false
default value: 4
conf file usage: la.beam = 4

option name: heuristic
description: instance of heuristic to use
type: TreeInductionHeuristics
required: false
default value: TreeInductionHeuristics
conf file usage: la.heuristic = "TreeInductionHeuristics"

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: nonSpecifityControl
description: a flag to decide if further control on the purity measure should be made
type: boolean
required: false
default value: false
conf file usage: la.nonSpecifityControl = false

option name: operator
description: refinement operator instance to use
type: RefinementOperator
required: false
default value: DLTreesRefinementOperator
conf file usage: la.operator = "DLTreesRefinementOperator"

option name: puritythreshold
description: Purity threshold for setting a leaf
type: double
required: false
default value: 0.05
conf file usage: la.puritythreshold = 0.05

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

component: tdt (org.dllearner.algorithms.decisiontrees.tdt.TDTClassifier) v1.0
==============================================================================
A Terminological Decision Tree

conf file usage: la.type = "tdt"

option name: binaryClassification
description: if it is a binary classification problem
type: boolean
required: false
default value: false
conf file usage: la.binaryClassification = false

option name: ccp
description: value for limiting the number of generated concepts
type: boolean
required: false
default value: false
conf file usage: la.ccp = false

option name: classToDescribe
description: concept for splitting undefined examples into positive and negative for binary classification problems
type: OWLClassExpression
required: false
default value: 
conf file usage: la.classToDescribe = ""

option name: heuristic
description: the heuristic instance to use
type: TreeInductionHeuristics
required: false
default value: TreeInductionHeuristics
conf file usage: la.heuristic = "TreeInductionHeuristics"

option name: missingValueTreatmentForTDT
description: for overcoming the problem of missing values in tree algorithms.tree.models
type: boolean
required: false
default value: false
conf file usage: la.missingValueTreatmentForTDT = false

option name: operator
description: the refinement operator instance to use
type: RefinementOperator
required: false
default value: DLTreesRefinementOperator
conf file usage: la.operator = "DLTreesRefinementOperator"

option name: puritythreshold
description: Purity threshold for setting a leaf
type: double
required: false
default value: 0.05
conf file usage: la.puritythreshold = 0.05

component: ELTL (org.dllearner.algorithms.el.ELLearningAlgorithm) v0.5
======================================================================
ELTL is an algorithm based on the refinement operator in http://jens-lehmann.org/files/2009/el_ilp.pdf.

conf file usage: la.type = "eltl"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: classToDescribe
description: class of which an OWL class expression should be learned
type: IRI
required: false
default value: 
conf file usage: la.classToDescribe = ""

option name: heuristic
description: The heuristic variable to use for ELTL
type: ELHeuristic
required: false
default value: StableHeuristic
conf file usage: la.heuristic = "StableHeuristic"

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: instanceBasedDisjoints
description: Specifies whether to use real disjointness checks or instance based ones (no common instances) in the refinement operator.
type: boolean
required: false
default value: true
conf file usage: la.instanceBasedDisjoints = true

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxClassExpressionDepth
description: The maximum depth for class expressions to test
type: int
required: false
default value: 2
conf file usage: la.maxClassExpressionDepth = 2

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: maxNrOfResults
description: Sets the maximum number of results one is interested in
type: int
required: false
default value: 10
conf file usage: la.maxNrOfResults = 10

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
type: double
required: false
default value: 0.0
conf file usage: la.noisePercentage = 0.0

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: replaceSearchTree
description: specifies whether to replace the search tree in the log file after each run or append the new search tree
type: boolean
required: false
default value: false
conf file usage: la.replaceSearchTree = false

option name: searchTreeFile
description: file to use for the search tree
type: String
required: false
default value: log/searchTree.txt
conf file usage: la.searchTreeFile = "log/searchTree.txt"

option name: startClass
description: You can specify a start class for the algorithm. To do this, you have to use Manchester OWL syntax without using prefixes.
type: OWLClassExpression
required: false
default value: owl:Thing
conf file usage: la.startClass = "owl:Thing"

option name: stopOnFirstDefinition
description: algorithm will terminate immediately when a correct definition is found
type: boolean
required: false
default value: false
conf file usage: la.stopOnFirstDefinition = false

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

option name: writeSearchTree
description: specifies whether to write a search tree
type: boolean
required: false
default value: false
conf file usage: la.writeSearchTree = false

component: Disjunctive ELTL (org.dllearner.algorithms.el.ELLearningAlgorithmDisjunctive) v0.5
=============================================================================================
Disjunctive ELTL is an algorithm based on the refinement operator in http://jens-lehmann.org/files/2009/el_ilp.pdf with support for disjunctions.

conf file usage: la.type = "deltl"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: instanceBasedDisjoints
description: whether to do real disjoint tests or check that two named classes do not have common instances
type: boolean
required: false
default value: 
conf file usage: la.instanceBasedDisjoints = 

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
type: double
required: false
default value: 0.0
conf file usage: la.noisePercentage = 0.0

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: startClass
description: You can specify a start class for the algorithm. To do this, you have to use Manchester OWL syntax without using prefixes.
type: OWLClassExpression
required: false
default value: owl:Thing
conf file usage: la.startClass = "owl:Thing"

option name: stopOnFirstDefinition
description: algorithm will terminate immediately when a correct definition is found
type: boolean
required: false
default value: false
conf file usage: la.stopOnFirstDefinition = false

option name: treeSearchTimeSeconds
description: Specifies how long the algorithm should search for a partial solution (a tree).
type: double
required: false
default value: 1.0
conf file usage: la.treeSearchTimeSeconds = 1.0

option name: tryFullCoverage
description: If yes, then the algorithm tries to cover all positive examples. Note that while this improves accuracy on the testing set, it may lead to overfitting.
type: boolean
required: false
default value: false
conf file usage: la.tryFullCoverage = false

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

component: OWL Class Expression Learner (org.dllearner.algorithms.ocel.OCEL) v1.2
=================================================================================

conf file usage: la.type = "ocel"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: lengthMetric
description: adjust the weights of class expression length in refinement
type: OWLClassExpressionLengthMetric
required: false
default value: OCEL default metric
conf file usage: la.lengthMetric = "OCEL default metric"

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true

component: query tree learner with noise (disjunctive) (org.dllearner.algorithms.qtl.QTL2Disjunctive) v0.8
==========================================================================================================

conf file usage: la.type = "qtl2dis"

option name: allowedConcepts
description: List of classes that are allowed
type: Set
required: false
default value: 
conf file usage: la.allowedConcepts = {}

option name: allowedDataProperties
description: List of data properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedDataProperties = {}

option name: allowedObjectProperties
description: List of object properties to allow
type: Set
required: false
default value: 
conf file usage: la.allowedObjectProperties = {}

option name: ignoredConcepts
description: List of classes to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredConcepts = {}

option name: ignoredDataProperties
description: List of data properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredDataProperties = {}

option name: ignoredObjectProperties
description: List of object properties to ignore
type: Set
required: false
default value: 
conf file usage: la.ignoredObjectProperties = {}

option name: learningProblem
description: The Learning Problem variable to use in this algorithm
type: AbstractClassExpressionLearningProblem
required: false
default value: 
conf file usage: la.learningProblem = ""

option name: maxExecutionTimeInSeconds
description: maximum execution of the algorithm in seconds
type: int
required: false
default value: 10
conf file usage: la.maxExecutionTimeInSeconds = 10

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
type: double
required: false
default value: 0.0
conf file usage: la.noisePercentage = 0.0

option name: reasoner
description: The reasoner variable to use for this learning problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: la.reasoner = ""

option name: useMinimizer
description: Specifies whether returned expressions should be minimised by removing those parts, which are not needed. (Basically the minimiser tries to find the shortest expression which is equivalent to the learned expression). Turning this feature off may improve performance.
type: boolean
required: false
default value: true
conf file usage: la.useMinimizer = true



*******************
* LearningProblem *
*******************

component: Class as Instance LP (org.dllearner.learningproblems.ClassAsInstanceLearningProblem) v0.1
====================================================================================================

conf file usage: lp.type = "classasinstance"

option name: percentPerLengthUnit
description: Percent Per Length Unit
type: double
required: false
default value: 0.05
conf file usage: lp.percentPerLengthUnit = 0.05

component: ClassLearningProblem (org.dllearner.learningproblems.ClassLearningProblem) v0.6
==========================================================================================

conf file usage: lp.type = "clp"

option name: accuracyMethod
description: Specifies, which method/function to use for computing accuracy. Available measues are "pred_acc" (predictive accuracy), "fmeasure" (F measure), "generalised_fmeasure" (generalised F-Measure according to Fanizzi and d'Amato).
type: AccMethod
required: false
default value: PRED_ACC
conf file usage: lp.accuracyMethod = "PRED_ACC"

option name: betaEq
description: beta index for F-measure in definition learning
type: double
required: false
default value: 1.0
conf file usage: lp.betaEq = 1.0

option name: betaSC
description: beta index for F-measure in super class learning
type: double
required: false
default value: 3.0
conf file usage: lp.betaSC = 3.0

option name: checkConsistency
description: whether to check for consistency of suggestions (when added to ontology)
type: boolean
required: false
default value: true
conf file usage: lp.checkConsistency = true

option name: classToDescribe
description: class of which an OWL class expression should be learned
type: IRI
required: true
default value: 
conf file usage: lp.classToDescribe = ""

option name: equivalence
description: Whether this is an equivalence problem (or superclass learning problem)
type: boolean
required: false
default value: true
conf file usage: lp.equivalence = true

option name: maxExecutionTimeInSeconds
description: Maximum execution time in seconds
type: int
required: false
default value: 10
conf file usage: lp.maxExecutionTimeInSeconds = 10

component: FuzzyPosNegLPStandard (org.dllearner.learningproblems.FuzzyPosNegLPStandard) v0.2
============================================================================================

conf file usage: lp.type = "fuzzyPosNeg"

option name: accuracyMethod
description: Specifies, which method/function to use for computing accuracy. Available measues are "PRED_ACC" (predictive accuracy), "FMEASURE" (F measure), "GEN_FMEASURE" (generalised F-Measure according to Fanizzi and d'Amato).
type: HeuristicType
required: false
default value: PRED_ACC
conf file usage: lp.accuracyMethod = "PRED_ACC"

component: PosNegLPStandard (org.dllearner.learningproblems.PosNegLPStandard) v0.8
==================================================================================

conf file usage: lp.type = "posNegStandard"

option name: accuracyMethod
description: Specifies, which method/function to use for computing accuracy. Available measues are "PRED_ACC" (predictive accuracy), "FMEASURE" (F measure), "GEN_FMEASURE" (generalised F-Measure according to Fanizzi and d'Amato).
type: AccMethodTwoValued
required: false
default value: PRED_ACC
conf file usage: lp.accuracyMethod = "PRED_ACC"

option name: negativeExamples
description: list of negative examples
type: Set
required: true
default value: 
conf file usage: lp.negativeExamples = {}

option name: percentPerLengthUnit
description: Percent Per Length Unit
type: double
required: false
default value: 0.05
conf file usage: lp.percentPerLengthUnit = 0.05

option name: positiveExamples
description: list of positive examples
type: Set
required: true
default value: 
conf file usage: lp.positiveExamples = {}

option name: useRetrievalForClassification
description: "Specifies whether to use retrieval or instance checks for testing a concept. - NO LONGER FULLY SUPPORTED.
type: boolean
required: false
default value: false
conf file usage: lp.useRetrievalForClassification = false

component: PosNegLPStrict (org.dllearner.learningproblems.PosNegLPStrict) v0.1
==============================================================================
three valued definition learning problem

conf file usage: lp.type = "posNegStrict"

option name: accuracyMethod
description: Specifies, which method/function to use for computing accuracy. Available measues are "PRED_ACC" (predictive accuracy), "FMEASURE" (F measure), "GEN_FMEASURE" (generalised F-Measure according to Fanizzi and d'Amato).
type: AccMethodTwoValued
required: false
default value: PRED_ACC
conf file usage: lp.accuracyMethod = "PRED_ACC"

option name: accuracyPenalty
description: penalty for pos/neg examples which are classified as neutral
type: double
required: false
default value: 1.0
conf file usage: lp.accuracyPenalty = 1.0

option name: errorPenalty
description: penalty for pos. examples classified as negative or vice versa
type: double
required: false
default value: 3.0
conf file usage: lp.errorPenalty = 3.0

option name: negativeExamples
description: list of negative examples
type: Set
required: true
default value: 
conf file usage: lp.negativeExamples = {}

option name: penaliseNeutralExamples
description: if set to true neutral examples are penalised
type: boolean
required: false
default value: 
conf file usage: lp.penaliseNeutralExamples = 

option name: percentPerLengthUnit
description: Percent Per Length Unit
type: double
required: false
default value: 0.05
conf file usage: lp.percentPerLengthUnit = 0.05

option name: positiveExamples
description: list of positive examples
type: Set
required: true
default value: 
conf file usage: lp.positiveExamples = {}

option name: useRetrievalForClassification
description: "Specifies whether to use retrieval or instance checks for testing a concept. - NO LONGER FULLY SUPPORTED.
type: boolean
required: false
default value: false
conf file usage: lp.useRetrievalForClassification = false

component: PosNegUndLP (org.dllearner.learningproblems.PosNegUndLP) v1.0
========================================================================
A learning problem with uncertain-membership instances

conf file usage: lp.type = "posNegUndLP"

option name: uncertainExamples
description: the uncertain examples
type: Set
required: true
default value: 
conf file usage: lp.uncertainExamples = {}

component: positive only learning problem (org.dllearner.learningproblems.PosOnlyLP) v0.6
=========================================================================================

conf file usage: lp.type = "posonlylp"

option name: positiveExamples
description: the positive examples
type: SortedSet
required: true
default value: 
conf file usage: lp.positiveExamples = ""

component: PropertyAxiomLearningProblem (org.dllearner.learningproblems.PropertyAxiomLearningProblem) v0.6
==========================================================================================================

conf file usage: lp.type = "palp"

option name: reasoner
description: The reasoner component variable to use for this Learning Problem
type: AbstractReasonerComponent
required: false
default value: 
conf file usage: lp.reasoner = ""



*********************
* ReasonerComponent *
*********************

component: closed world reasoner (org.dllearner.reasoning.ClosedWorldReasoner) v0.9
===================================================================================

conf file usage: reasoner.type = "cwr"

option name: defaultNegation
description: Whether to use default negation, i.e. an instance not being in a class means that it is in the negation of the class.
type: boolean
required: false
default value: true
conf file usage: reasoner.defaultNegation = true

option name: forallSemantics
description: This option controls how to interpret the all quantifier in forall r.C. The standard option is to return all those which do not have an r-filler not in C. The domain semantics is to use those which are in the domain of r and do not have an r-filler not in C. The forallExists semantics is to use those which have at least one r-filler and do not have an r-filler not in C.
type: ForallSemantics
required: false
default value: standard
conf file usage: reasoner.forallSemantics = "standard"

option name: precomputeClassHierarchy
description: if class hierarchy should be precomputed
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeClassHierarchy = true

option name: precomputeDataPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeDataPropertyHierarchy = true

option name: precomputeObjectPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeObjectPropertyHierarchy = true

option name: sources
description: the underlying knowledge sources
type: Set
required: true
default value: 
conf file usage: reasoner.sources = {}

option name: useInstanceChecks
description: whether to use single instance checks
type: boolean
required: false
default value: false
conf file usage: reasoner.useInstanceChecks = false

component: OWL API Reasoner (org.dllearner.reasoning.OWLAPIReasoner) v0.8
=========================================================================

conf file usage: reasoner.type = "oar"

option name: owlLinkURL
description: specifies the URL of the remote OWLLink server
type: String
required: false
default value: null
conf file usage: reasoner.owlLinkURL = "null"

option name: precomputeClassHierarchy
description: if class hierarchy should be precomputed
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeClassHierarchy = true

option name: precomputeDataPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeDataPropertyHierarchy = true

option name: precomputeObjectPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeObjectPropertyHierarchy = true

option name: reasonerImplementation
description: specifies the used OWL API reasoner implementation
type: ReasonerImplementation
required: false
default value: pellet
conf file usage: reasoner.reasonerImplementation = "pellet"

option name: sources
description: the underlying knowledge sources
type: Set
required: true
default value: 
conf file usage: reasoner.sources = {}

option name: useFallbackReasoner
description: specifies whether to use a fallback reasoner if a reasoner call fails because it's not supported or results in a bug. (the fallback works only on the assertional level
type: boolean
required: false
default value: false
conf file usage: reasoner.useFallbackReasoner = false

option name: useInstanceChecks
description: whether to use single instance checks
type: boolean
required: false
default value: false
conf file usage: reasoner.useInstanceChecks = false

component: SPARQL Reasoner (org.dllearner.reasoning.SPARQLReasoner) v0.1
========================================================================

conf file usage: reasoner.type = "spr"

option name: laxMode
description: Use alternative relaxed Sparql-queries for Classes and Individuals
type: boolean
required: false
default value: false
conf file usage: reasoner.laxMode = false

option name: precomputeClassHierarchy
description: if class hierarchy should be precomputed
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeClassHierarchy = true

option name: precomputeDataPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeDataPropertyHierarchy = true

option name: precomputeObjectPropertyHierarchy
description: no description available
type: boolean
required: false
default value: true
conf file usage: reasoner.precomputeObjectPropertyHierarchy = true

option name: sources
description: the underlying knowledge sources
type: Set
required: true
default value: 
conf file usage: reasoner.sources = {}

option name: useCache
description: Whether to use a file-based cache
type: boolean
required: false
default value: true
conf file usage: reasoner.useCache = true

option name: useGenericSplitsCode
description: Whether to use the generic facet generation code, which requires downloading all instances and is thus not recommended
type: boolean
required: false
default value: false
conf file usage: reasoner.useGenericSplitsCode = false

option name: useInstanceChecks
description: whether to use single instance checks
type: boolean
required: false
default value: false
conf file usage: reasoner.useInstanceChecks = false

option name: useValueLists
description: Whether to use SPARQL1.1 Value Lists
type: boolean
required: false
default value: false
conf file usage: reasoner.useValueLists = false



**********************
* RefinementOperator *
**********************

component: Refinement Operator TDT (org.dllearner.algorithms.decisiontrees.refinementoperators.DLTreesRefinementOperator) v1.0
==============================================================================================================================

conf file usage: op.type = "tdtop"

option name: beam
description: no description available
type: int
required: false
default value: 5
conf file usage: op.beam = 5

option name: lp
description: the learning problem instance to use
type: PosNegLP
required: false
default value: 
conf file usage: op.lp = ""

option name: reasoner
description: the reasoner instance to use
type: Reasoner
required: false
default value: 
conf file usage: op.reasoner = ""

option name: ro
description: no description available
type: int
required: false
default value: 1
conf file usage: op.ro = 1

component: OperatorInverter (org.dllearner.refinementoperators.OperatorInverter) v0.1
=====================================================================================

conf file usage: op.type = "inv_op"

option name: guaranteeLength
description: Whether inverse solutions must respect the desired max length
type: boolean
required: false
default value: true
conf file usage: op.guaranteeLength = true

option name: operator
description: operator to invert
type: LengthLimitedRefinementOperator
required: true
default value: 
conf file usage: op.operator = ""

option name: useNegationNormalForm
description: whether to apply NNF
type: boolean
required: false
default value: true
conf file usage: op.useNegationNormalForm = true

component: rho refinement operator (org.dllearner.refinementoperators.RhoDRDown) v0.8
=====================================================================================

conf file usage: op.type = "rho"

option name: applyAllFilter
description: no description available
type: boolean
required: false
default value: true
conf file usage: op.applyAllFilter = true

option name: applyExistsFilter
description: no description available
type: boolean
required: false
default value: true
conf file usage: op.applyExistsFilter = true

option name: cardinalityLimit
description: limit for cardinality restrictions (this makes sense if we e.g. have compounds with too many atoms)
type: int
required: false
default value: 5
conf file usage: op.cardinalityLimit = 5

option name: disjointChecks
description: no description available
type: boolean
required: false
default value: true
conf file usage: op.disjointChecks = true

option name: dropDisjuncts
description: no description available
type: boolean
required: false
default value: false
conf file usage: op.dropDisjuncts = false

option name: instanceBasedDisjoints
description: no description available
type: boolean
required: false
default value: true
conf file usage: op.instanceBasedDisjoints = true

option name: maxNrOfSplits
description: the number of generated split intervals for numeric types
type: int
required: false
default value: 12
conf file usage: op.maxNrOfSplits = 12

option name: useAllConstructor
description: support of universal restrictions (owl:allValuesFrom), e.g. ∀ r.C 
type: boolean
required: false
default value: true
conf file usage: op.useAllConstructor = true

option name: useBooleanDatatypes
description: support of boolean datatypes (xsd:boolean), e.g. ∃ r.{true} 
type: boolean
required: false
default value: true
conf file usage: op.useBooleanDatatypes = true

option name: useCardinalityRestrictions
description: support of qualified cardinality restrictions (owl:minCardinality), e.g. ≥ 3 r.C 
type: boolean
required: false
default value: true
conf file usage: op.useCardinalityRestrictions = true

option name: useDataHasValueConstructor
description: whether to use hasValue on frequently occuring strings
type: boolean
required: false
default value: false
conf file usage: op.useDataHasValueConstructor = false

option name: useExistsConstructor
description: support of existential restrictions (owl:someValuesFrom), e.g. ∃ r.C 
type: boolean
required: false
default value: true
conf file usage: op.useExistsConstructor = true

option name: useHasValueConstructor
description: support of has value constructor (owl:hasValue), e.g. ∃ r.{a} 
type: boolean
required: false
default value: false
conf file usage: op.useHasValueConstructor = false

option name: useInverse
description: support of inverse object properties (owl:inverseOf), e.g. r⁻.C 
type: boolean
required: false
default value: false
conf file usage: op.useInverse = false

option name: useNegation
description: support of negation (owl:complementOf), e.g. ¬ C 
type: boolean
required: false
default value: true
conf file usage: op.useNegation = true

option name: useNumericDatatypes
description: support of numeric datatypes (xsd:int, xsd:double, ...), e.g. ∃ r.{true} 
type: boolean
required: false
default value: true
conf file usage: op.useNumericDatatypes = true

option name: useObjectValueNegation
description: whether to generate object complement while refining
type: boolean
required: false
default value: false
conf file usage: op.useObjectValueNegation = false

option name: useSomeOnly
description: universal restrictions on a property r are only used when there is already a cardinality and/or existential restriction on r
type: boolean
required: false
default value: true
conf file usage: op.useSomeOnly = true

option name: useStringDatatypes
description: support of string datatypes (xsd:string), e.g. ∃ r.{"SOME_STRING"} 
type: boolean
required: false
default value: false
conf file usage: op.useStringDatatypes = false

option name: useTimeDatatypes
description: no description available
type: boolean
required: false
default value: true
conf file usage: op.useTimeDatatypes = true



*************
* Heuristic *
*************

component: OEHeuristicRuntime (org.dllearner.algorithms.celoe.OEHeuristicRuntime) v0.5
======================================================================================

conf file usage: h.type = "celoe_heuristic"

option name: expansionPenaltyFactor
description: penalty for long descriptions (horizontal expansion) (strong by default)
type: double
required: false
default value: 0.1
conf file usage: h.expansionPenaltyFactor = 0.1

option name: gainBonusFactor
description: bonus for being better than parent node
type: double
required: false
default value: 0.3
conf file usage: h.gainBonusFactor = 0.3

option name: nodeRefinementPenalty
description: penalty if a node OWLClassExpression has very many refinements since exploring such a node is computationally very expensive
type: double
required: false
default value: 0.0001
conf file usage: h.nodeRefinementPenalty = 0.0001

option name: startNodeBonus
description: no description available
type: double
required: false
default value: 0.1
conf file usage: h.startNodeBonus = 0.1

component: DisjunctiveHeuristic (org.dllearner.algorithms.el.DisjunctiveHeuristic) v0.1
=======================================================================================

conf file usage: h.type = "disjunctive_heuristic"

component: Stable Heuristic (org.dllearner.algorithms.el.StableHeuristic) v0.1
==============================================================================

conf file usage: h.type = "el_heuristic"

component: Flexible Heuristic (org.dllearner.algorithms.ocel.FlexibleHeuristic) v0.1
====================================================================================

conf file usage: h.type = "flexheuristic"

option name: nrOfNegativeExamples
description: the number of negative examples
type: int
required: false
default value: 
conf file usage: h.nrOfNegativeExamples = 

option name: percentPerLengthUnit
description: score percent to deduct per expression length
type: double
required: true
default value: 
conf file usage: h.percentPerLengthUnit = 

component: Lexicograpgic Heuristic (org.dllearner.algorithms.ocel.LexicographicHeuristic) v0.1
==============================================================================================

conf file usage: h.type = "lexheuristic"

component: multiple criteria heuristic (org.dllearner.algorithms.ocel.MultiHeuristic) v0.7
==========================================================================================

conf file usage: h.type = "multiheuristic"

option name: expansionPenaltyFactor
description: no description available
type: double
required: false
default value: 0.02
conf file usage: h.expansionPenaltyFactor = 0.02

option name: gainBonusFactor
description: no description available
type: double
required: false
default value: 0.5
conf file usage: h.gainBonusFactor = 0.5

option name: negationPenalty
description: no description available
type: int
required: false
default value: 0
conf file usage: h.negationPenalty = 0

option name: negativeWeight
description: no description available
type: double
required: false
default value: 1.0
conf file usage: h.negativeWeight = 1.0

option name: nodeChildPenalty
description: no description available
type: double
required: false
default value: 0.0001
conf file usage: h.nodeChildPenalty = 0.0001

option name: startNodeBonus
description: no description available
type: double
required: false
default value: 0.1
conf file usage: h.startNodeBonus = 0.1

component: QueryTreeHeuristic (org.dllearner.algorithms.qtl.heuristics.QueryTreeHeuristicComplex) v0.1
======================================================================================================

conf file usage: h.type = "qtree_heuristic_complex"

component: QueryTreeHeuristic (org.dllearner.algorithms.qtl.heuristics.QueryTreeHeuristicSimple) v0.1
=====================================================================================================

conf file usage: h.type = "qtree_heuristic_simple"



*************
* AccMethod *
*************

component: AMeasure (org.dllearner.learningproblems.AccMethodAMeasure) v0.1
===========================================================================

conf file usage: accMethod.type = "ameasure"

component: AMeasure Approximate (org.dllearner.learningproblems.AccMethodAMeasureApprox) v0.1
=============================================================================================

conf file usage: accMethod.type = "approx.ameasure"

component: FMeasure (org.dllearner.learningproblems.AccMethodFMeasure) v0.0
===========================================================================

conf file usage: accMethod.type = "fmeasure"

component: FMeasure Approximate (org.dllearner.learningproblems.AccMethodFMeasureApprox) v0.0
=============================================================================================

conf file usage: accMethod.type = "approx.fmeasure"

option name: approxDelta
description: The Approximate Delta
type: double
required: false
default value: 0.05
conf file usage: accMethod.approxDelta = 0.05

component: Weighted FMeasure (org.dllearner.learningproblems.AccMethodFMeasureWeighted) v0.0
============================================================================================

conf file usage: accMethod.type = "weighted.fmeasure"

option name: balanced
description: balance the weights to relative set size
type: boolean
required: false
default value: false
conf file usage: accMethod.balanced = false

option name: negWeight
description: weight on the negative examples
type: double
required: false
default value: 1
conf file usage: accMethod.negWeight = 1

option name: posWeight
description: weight on the positive examples
type: double
required: false
default value: 1
conf file usage: accMethod.posWeight = 1

component: Generalised FMeasure (org.dllearner.learningproblems.AccMethodGenFMeasure) v0.1
==========================================================================================

conf file usage: accMethod.type = "gen_fmeasure"

component: Jaccard Coefficient (org.dllearner.learningproblems.AccMethodJaccard) v0.1
=====================================================================================

conf file usage: accMethod.type = "jaccard"

component: Predictive Accuracy (org.dllearner.learningproblems.AccMethodPredAcc) v0.0
=====================================================================================

conf file usage: accMethod.type = "pred_acc"

component: Predictive Accuracy Approximate (org.dllearner.learningproblems.AccMethodPredAccApprox) v0.0
=======================================================================================================

conf file usage: accMethod.type = "approx.prec_acc"

option name: approxDelta
description: The Approximate Delta
type: double
required: false
default value: 0.05
conf file usage: accMethod.approxDelta = 0.05

component: Predictive Accuracy without Weak elimination (org.dllearner.learningproblems.AccMethodPredAccOCEL) v0.0
==================================================================================================================

conf file usage: accMethod.type = "pred_acc.ocel"

component: Weighted Predictive Accuracy (org.dllearner.learningproblems.AccMethodPredAccWeighted) v0.0
======================================================================================================

conf file usage: accMethod.type = "weighted.pred_acc"

option name: balanced
description: balance the weights to relative set size
type: boolean
required: false
default value: false
conf file usage: accMethod.balanced = false

option name: negWeight
description: weight on the negative examples
type: double
required: false
default value: 1
conf file usage: accMethod.negWeight = 1

option name: posWeight
description: weight on the positive examples
type: double
required: false
default value: 1
conf file usage: accMethod.posWeight = 1


********************
* Other Components *
********************

component: OWL Class Expression Length Metric (org.dllearner.utilities.owl.OWLClassExpressionLengthMetric) v0.1
===============================================================================================================

conf file usage: component.type = "cel_metric"


********************
* Other Components *
********************

component: Mammalian Phenotype SemKernel Workflow (org.dllearner.utilities.semkernel.MPSemKernelWorkflow) v0.1
==============================================================================================================

conf file usage: component.type = "mpskw"


********************
* Other Components *
********************

component: SemKernel Workflow (org.dllearner.utilities.semkernel.SemKernelWorkflow) v0.1
========================================================================================

conf file usage: component.type = "skw"

